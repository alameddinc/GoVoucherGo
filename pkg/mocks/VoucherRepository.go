// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/alameddinc/GoVoucherGo/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockVoucherRepository is an autogenerated mock type for the Repository type
type MockVoucherRepository struct {
	mock.Mock
}

// Apply provides a mock function with given fields: voucherCode, orderId, vendorID, cost
func (_m *MockVoucherRepository) Apply(voucherCode string, orderId string, vendorID string, cost float64) error {
	ret := _m.Called(voucherCode, orderId, vendorID, cost)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, float64) error); ok {
		r0 = rf(voucherCode, orderId, vendorID, cost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cancel provides a mock function with given fields: orderID, cost
func (_m *MockVoucherRepository) Cancel(orderID string, cost float64) error {
	ret := _m.Called(orderID, cost)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(orderID, cost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: voucherCode, vendorID
func (_m *MockVoucherRepository) Delete(voucherCode string, vendorID string) error {
	ret := _m.Called(voucherCode, vendorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(voucherCode, vendorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *MockVoucherRepository) Save(_a0 entity.Voucher) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Voucher) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *MockVoucherRepository) Update(_a0 entity.Voucher) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Voucher) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: voucherCode, vendorID, cost
func (_m *MockVoucherRepository) Validate(voucherCode string, vendorID string, cost float64) error {
	ret := _m.Called(voucherCode, vendorID, cost)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(voucherCode, vendorID, cost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockVoucherRepository creates a new instance of MockVoucherRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockVoucherRepository(t testing.TB) *MockVoucherRepository {
	mock := &MockVoucherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
